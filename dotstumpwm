#-quicklisp
(let ((quicklisp-init (merge-pathnames "quicklisp/setup.lisp"
				       (user-homedir-pathname))))
  (when (probe-file quicklisp-init)
    (load quicklisp-init)))

;; -*- lisp -*-
(ql:quickload "stumpwm")

(in-package :stumpwm)


;;Startup
(run-shell-command "nitrogen --restore")
(run-shell-command "picom")
;;fixes
;;MAKING SCROLL WORK
(setf (getenv "GDK_CORE_DEVICE_EVENTS") "1")


;; change the prefix key to something else
(set-prefix-key (kbd "M-s"))

;; prompt the user for an interactive command. The first arg is an
;; optional initial contents.
(defcommand colon1 (&optional (initial "")) (:rest)
  (let ((cmd (read-one-line (current-screen) ": " :initial-input initial)))
    (when cmd
      (eval-command cmd t))))


;;Spawning pavu
(define-key *root-map* (kbd "M-v") "exec pavucontrol")

;; Read some doc
(define-key *root-map* (kbd "d") "exec gv")

;; Browse somewhere
(define-key *root-map* (kbd "b") "colon1 exec brave https://www.")

;; Ssh somewhere
(define-key *root-map* (kbd "C-s") "colon1 exec xterm -e ssh ")

;; Lock screen
(define-key *root-map* (kbd "C-q") "exec xlock")

;;Launching Dmenu
(define-key *root-map* (kbd "d") "exec dmenu_run")

;;Quicking loading the rc
(define-key *root-map* (kbd "C-l") "loadrc")

;;Starting term
(define-key *root-map* (kbd "t") "exec alacritty")

;;Starting thunar
(define-key *root-map* (kbd "T") "exec thunar")

;;Better quit 
(define-key *root-map* (kbd "Q") "delete")

;;Quick exec
(define-key *root-map* (kbd "space") "colon")

;;Gnome screenshot
(define-key *root-map* (kbd "C-p") "exec gnome-screenshot -i")

;;App finder
(define-key *root-map* (kbd "M-L") "exec xfce4-appfinder")

;;VOLUME
(define-key *root-map* (kbd "M-u") "exec amixer -q set Master 5%+")
(define-key *root-map* (kbd "M-d") "exec amixer -q set Master 5%-")

;; Turn on/off the mode line for the current head only.
(define-key *root-map* (kbd "s-B") "mode-line")

(define-key *root-map* (kbd "M-0") "xset s noblank;xset s 0 0;xset s off ; xset -dpms")

(define-key *root-map* (kbd "v") "vsplit")
;; SCREEN
;;


;; change focus
(define-key *top-map* (kbd "M-H") "move-window left")
(define-key *top-map* (kbd "M-J") "move-window down")
(define-key *top-map* (kbd "M-K") "move-window up")
(define-key *top-map* (kbd "M-L") "move-window right")

;; focus on mouse hoover
(setf *mouse-focus-policy* :sloppy)

;; Display
(setf *input-window-gravity* :center
      *message-window-input-gravity* :left)

;; Web jump (works for DuckDuckGo and Imdb)
(defmacro make-web-jump (name prefix)
  `(defcommand ,(intern name) (search) ((:rest ,(concatenate 'string name " search: ")))
    (nsubstitute #\+ #\Space search)
    (run-shell-command (concatenate 'string ,prefix search))))

(make-web-jump "duckduckgo" "brave https://duckduckgo.com/?q=")
(make-web-jump "imdb" "brave http://www.imdb.com/find?q=")
(make-web-jump "eng-jp" "brave https://www.deepl.com/translator#en/ja/")
;; C-t M-s is a terrble binding, but you get the idea.
(define-key *root-map* (kbd "M-s") "duckduckgo")
(define-key *root-map* (kbd "i") "imdb")
(define-key *root-map* (kbd "C-j") "eng-jp")
;; Message window font
(set-font "-xos4-terminus-medium-r-normal--14-140-72-72-c-80-iso8859-15")

;;; Define window placement policy...

;; Clear rules
(clear-window-placement-rules)

;; Last rule to match takes precedence!
;; TIP: if the argument to :title or :role begins with an ellipsis, a substring
;; match is performed.
;; TIP: if the :create flag is set then a missing group will be created and
;; restored from *data-dir*/create file.
;; TIP: if the :restore flag is set then group dump is restored even for an
;; existing group using *data-dir*/restore file.
(define-frame-preference "Default"
  ;; frame raise lock (lock AND raise == jumpto)
  (0 t nil :class "Konqueror" :role "...konqueror-mainwindow")
  (1 t nil :class "XTerm"))

(define-frame-preference "Ardour"
  (0 t   t   :instance "ardour_editor" :type :normal)
  (0 t   t   :title "Ardour - Session Control")
  (0 nil nil :class "XTerm")
  (1 t   nil :type :normal)
  (1 t   t   :instance "ardour_mixer")
  (2 t   t   :instance "jvmetro")
  (1 t   t   :instance "qjackctl")
  (3 t   t   :instance "qjackctl" :role "qjackctlMainForm"))

(define-frame-preference "Shareland"
  (0 t   nil :class "XTerm")
  (1 nil t   :class "aMule"))

(define-frame-preference "Emacs"
  (1 t t :restore "emacs-editing-dump" :title "...xdvi")
  (0 t t :create "emacs-dump" :class "Emacs"))

;;Showing Key's while typing
(defun show-key-seq (key seq val)
       (message (print-key-seq (reverse seq))))
(add-hook *key-press-hook* 'show-key-seq)


 (defun enable-mode-line-everywhere ()
   (loop for screen in *screen-list* do
	  (loop for head in (screen-heads screen) do
		(enable-mode-line screen head t))))
 (enable-mode-line-everywhere)


;;MENU BAR

;;; Grabbed pointer

(setq
 *grab-pointer-character* 40
 *grab-pointer-character-mask* 41
 *grab-pointer-foreground* (hex-to-xlib-color "#3db270")
 *grab-pointer-background* (hex-to-xlib-color "#2c53ca"))

;; mod line

 ;; colors
 (setf *mode-line-background-color* (car *colors*))
 (setf *mode-line-foreground-color* (car (last *colors*)))
 (setf *mode-line-timeout* 1)
 ;; border color
 (setf *mode-line-border-color* (car (last *colors*))
	*mode-line-border-width* 0)

(setf *colors*
	'("#000000"   ;black
	"#ff8059"   ;red
	"#44bc44"   ;green
	"#d0bc00"   ;yellow
	"#2fafff"   ;blue
	"#feacd0"   ;magenta
	"#00d3d0"   ;cyan
	"#f4f4f4")) ;white

 (setf *default-bg-color* "#000000")
 (update-color-map (current-screen))
 (set-border-color        "#feacd0") ;; messages border
 (set-focus-color         "#feacd0")
 (set-unfocus-color       "#000000")
 (set-float-focus-color   "#feacd0")
 (set-float-unfocus-color "#000000")
 (set-msg-border-width 1)
 (setf *message-window-padding* 6)

 ;; format
 (setf *window-format* "%m%n%s%20t")

 (setf *screen-mode-line-format*
	(list
	 ;; Groups
	 " ^7[^4 %g ^n^7] "
	 ;; Windows
	 "^5 %W ^n"
	 ;;CPU
	 ;; Pad to right
	 "^>"
	 '(:eval (when (> *reps* 0)
		   (format nil "^1^B(Reps ~A)^n " *reps*)))
	 ;; Date
	 "^7"
	 "%d"
   ))
